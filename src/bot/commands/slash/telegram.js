import { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } from 'discord.js';
import { sendMessage } from '../../../utils/telegram/index.js';

export const config = {
  name: 'telegram',
  description: 'G·ª≠i th√¥ng b√°o sang Telegram ho·∫∑c ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi',
  options: [
    {
      name: 'test',
      description: 'Ki·ªÉm tra k·∫øt n·ªëi Telegram',
      type: 1
    },
    {
      name: 'send',
      description: 'G·ª≠i th√¥ng b√°o t·ªõi Telegram',
      type: 1,
      options: [
        {
          name: 'message',
          description: 'Tin nh·∫Øn c·∫ßn g·ª≠i',
          type: 3,
          required: true
        }
      ]
    }
  ],
  defaultMemberPermissions: PermissionFlagsBits.Administrator
};

export async function execute(interaction, client) {
  // Ch·ªâ cho ph√©p admin s·ª≠ d·ª•ng
  if (!interaction.memberPermissions.has(PermissionFlagsBits.Administrator)) {
    return interaction.reply({
      content: '‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.',
      ephemeral: true
    });
  }
  
  const subcommand = interaction.options.getSubcommand();
  
  if (subcommand === 'test') {
    await interaction.deferReply();
    try {
      await sendMessage(`üß™ Telegram connection test from Discord by ${interaction.user.tag}`);
      await interaction.editReply('‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn th·ª≠ nghi·ªám t·ªõi Telegram th√†nh c√¥ng.');
    } catch (error) {
      await interaction.editReply(`‚ùå L·ªói khi g·ª≠i tin nh·∫Øn t·ªõi Telegram: ${error.message}`);
    }
  } else if (subcommand === 'send') {
    const message = interaction.options.getString('message');
    await interaction.deferReply();
    
    try {
      await sendMessage(`üí¨ Message from Discord by ${interaction.user.tag}:\n${message}`);
      await interaction.editReply('‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn t·ªõi Telegram th√†nh c√¥ng.');
    } catch (error) {
      await interaction.editReply(`‚ùå L·ªói khi g·ª≠i tin nh·∫Øn t·ªõi Telegram: ${error.message}`);
    }
  }
}